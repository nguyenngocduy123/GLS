(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-custom-validators', ['exports', '@angular/forms', '@angular/core'], factory) :
    (factory((global['ngx-custom-validators'] = {}),global.ng.forms,global.ng.core));
}(this, (function (exports,forms,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isDate(obj) {
        try {
            /** @type {?} */
            var date = new Date(obj);
            return !isNaN(date.getTime());
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function parseDate(obj) {
        try {
            // Moment.js
            if (obj._d instanceof Date) {
                /** @type {?} */
                var d = /** @type {?} */ (obj._d);
                /** @type {?} */
                var month = +d.getMonth() + 1;
                /** @type {?} */
                var day = +d.getDate();
                return d.getFullYear() + "-" + formatDayOrMonth(month) + "-" + formatDayOrMonth(day);
            }
            // NgbDateStruct
            if (typeof obj === 'object' && obj.year != null && obj.month != null && obj.day != null) {
                /** @type {?} */
                var month = +obj.month;
                /** @type {?} */
                var day = +obj.day;
                return obj.year + "-" + formatDayOrMonth(month) + "-" + formatDayOrMonth(day);
            }
        }
        catch (e) { }
        return obj;
    }
    /**
     * @param {?} month
     * @return {?}
     */
    function formatDayOrMonth(month) {
        return month < 10 ? "0" + month : month;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var arrayLength = function (value) {
        return function (control) {
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var obj = control.value;
            return Array.isArray(obj) && obj.length >= +value ? null : { arrayLength: { minLength: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var base64 = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        return /^(?:[A-Z0-9+\/]{4})*(?:[A-Z0-9+\/]{2}==|[A-Z0-9+\/]{3}=|[A-Z0-9+\/]{4})$/i.test(v) ? null : { base64: true };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var creditCard = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        /** @type {?} */
        var sanitized = v.replace(/[^0-9]+/g, '');
        // problem with chrome
        /* tslint:disable */
        if (!(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|(?:9792)\d{12})$/.test(sanitized))) {
            return { creditCard: true };
        }
        /** @type {?} */
        var sum = 0;
        /** @type {?} */
        var digit;
        /** @type {?} */
        var tmpNum;
        /** @type {?} */
        var shouldDouble;
        for (var i = sanitized.length - 1; i >= 0; i--) {
            digit = sanitized.substring(i, (i + 1));
            tmpNum = parseInt(digit, 10);
            if (shouldDouble) {
                tmpNum *= 2;
                if (tmpNum >= 10) {
                    sum += ((tmpNum % 10) + 1);
                }
                else {
                    sum += tmpNum;
                }
            }
            else {
                sum += tmpNum;
            }
            shouldDouble = !shouldDouble;
        }
        if (Boolean((sum % 10) === 0 ? sanitized : false)) {
            return null;
        }
        return { creditCard: true };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var date = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        v = parseDate(v);
        return isDate(v) ? null : { date: true };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var dateISO = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : { dateISO: true };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var digits = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        return /^\d+$/.test(v) ? null : { digits: true };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var email = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        /* tslint:disable */
        return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(v) ? null : { 'email': true };
        /* tslint:enable */
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var equal = function (val) {
        return function (control) {
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = control.value;
            return val === v ? null : { equal: { value: val } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var equalTo = function (equalControl) {
        /** @type {?} */
        var subscribe = false;
        return function (control) {
            if (!subscribe) {
                subscribe = true;
                equalControl.valueChanges.subscribe(function () {
                    control.updateValueAndValidity();
                });
            }
            /** @type {?} */
            var v = control.value;
            return equalControl.value === v ? null : { equalTo: { control: equalControl, value: equalControl.value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var gt = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v > +value ? null : { gt: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var gte = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v >= +value ? null : { gte: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var json = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        try {
            /** @type {?} */
            var obj = JSON.parse(v);
            if (Boolean(obj) && typeof obj === 'object') {
                return null;
            }
        }
        catch (e) { }
        return { json: true };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var lt = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v < +value ? null : { lt: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var lte = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v <= +value ? null : { lte: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var max = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v <= +value ? null : { max: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var maxDate = function (maxInput) {
        /** @type {?} */
        var value;
        /** @type {?} */
        var subscribe = false;
        /** @type {?} */
        var maxValue = maxInput;
        /** @type {?} */
        var isForm = maxInput instanceof forms.FormControl || maxInput instanceof forms.NgModel;
        return function (control) {
            if (!subscribe && isForm) {
                subscribe = true;
                maxInput.valueChanges.subscribe(function () {
                    control.updateValueAndValidity();
                });
            }
            if (isForm) {
                maxValue = maxInput.value;
            }
            value = parseDate(maxValue);
            if (!isDate(value) && !(value instanceof Function)) {
                if (value == null) {
                    return null;
                }
                else if (isForm) {
                    return { maxDate: { error: 'maxDate is invalid' } };
                }
                else {
                    throw Error('maxDate value must be or return a formatted date');
                }
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var d = new Date(parseDate(control.value)).getTime();
            if (!isDate(d)) {
                return { value: true };
            }
            if (value instanceof Function) {
                value = value();
            }
            return d <= new Date(value).getTime() ? null : (isForm ? { maxDate: { control: maxInput, value: maxInput.value } } : { maxDate: { value: maxValue, control: undefined } });
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var min = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v >= +value ? null : { min: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var minDate = function (minInput) {
        /** @type {?} */
        var value;
        /** @type {?} */
        var subscribe = false;
        /** @type {?} */
        var minValue = minInput;
        /** @type {?} */
        var isForm = minInput instanceof forms.FormControl || minInput instanceof forms.NgModel;
        return function (control) {
            if (!subscribe && isForm) {
                subscribe = true;
                minInput.valueChanges.subscribe(function () {
                    control.updateValueAndValidity();
                });
            }
            if (isForm) {
                minValue = minInput.value;
            }
            value = parseDate(minValue);
            if (!isDate(value) && !(value instanceof Function)) {
                if (value == null) {
                    return null;
                }
                else if (isForm) {
                    return { minDate: { error: 'minDate is invalid' } };
                }
                else {
                    throw Error('minDate value must be or return a formatted date');
                }
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var d = new Date(parseDate(control.value)).getTime();
            if (!isDate(d)) {
                return { value: true };
            }
            if (value instanceof Function) {
                value = value();
            }
            return d >= new Date(value).getTime() ? null : (isForm ? { minDate: { control: minInput, value: minInput.value } } : { minDate: { value: minValue, control: undefined } });
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var notEqual = function (val) {
        return function (control) {
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = control.value;
            return val !== v ? null : { notEqual: { value: val } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var notEqualTo = function (notEqualControl) {
        /** @type {?} */
        var subscribe = false;
        return function (control) {
            if (!subscribe) {
                subscribe = true;
                notEqualControl.valueChanges.subscribe(function () {
                    control.updateValueAndValidity();
                });
            }
            /** @type {?} */
            var v = control.value;
            if (notEqualControl.value == null && v == null) {
                return null;
            }
            return notEqualControl.value !== v ? null : { notEqualTo: { control: notEqualControl, value: notEqualControl.value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var number = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(v) ? null : { 'number': true };
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var property = function (value) {
        return function (control) {
            var e_1, _a;
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var properties = value.split(',');
            /** @type {?} */
            var obj = control.value;
            /** @type {?} */
            var isValid = true;
            try {
                for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                    var prop = properties_1_1.value;
                    if (obj[prop] == null) {
                        isValid = false;
                        break;
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return))
                        _a.call(properties_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            return isValid ? null : { hasProperty: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var range = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = +control.value;
            return v >= value[0] && v <= value[1] ? null : { range: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var rangeLength = function (value) {
        return function (control) {
            if (!isPresent(value)) {
                return null;
            }
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = control.value;
            return v.length >= value[0] && v.length <= value[1] ? null : { rangeLength: { value: value } };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var uuids = {
        '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
        '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };
    /** @type {?} */
    var uuid = function (version) {
        return function (control) {
            if (isPresent(forms.Validators.required(control))) {
                return null;
            }
            /** @type {?} */
            var v = control.value;
            /** @type {?} */
            var pattern = uuids[version] || uuids.all;
            return (new RegExp(pattern)).test(v) ? null : { uuid: true };
        };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var url = function (control) {
        if (isPresent(forms.Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var v = control.value;
        /* tslint:disable */
        return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(v) ? null : { 'url': true };
        /* tslint:enable */
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ARRAY_LENGTH_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return ArrayLengthValidator; }),
        multi: true
    };
    var ArrayLengthValidator = /** @class */ (function () {
        function ArrayLengthValidator() {
        }
        /**
         * @return {?}
         */
        ArrayLengthValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = arrayLength(this.arrayLength);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ArrayLengthValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'arrayLength') {
                        this.validator = arrayLength(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        ArrayLengthValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        ArrayLengthValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        ArrayLengthValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[arrayLength][formControlName],[arrayLength][formControl],[arrayLength][ngModel]',
                        providers: [ARRAY_LENGTH_VALIDATOR]
                    },] }
        ];
        ArrayLengthValidator.propDecorators = {
            arrayLength: [{ type: core.Input }]
        };
        return ArrayLengthValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BASE64_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return Base64Validator; }),
        multi: true
    };
    var Base64Validator = /** @class */ (function () {
        function Base64Validator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        Base64Validator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return base64(c);
            };
        Base64Validator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[base64][formControlName],[base64][formControl],[base64][ngModel]',
                        providers: [BASE64_VALIDATOR]
                    },] }
        ];
        return Base64Validator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CREDIT_CARD_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return CreditCardValidator; }),
        multi: true
    };
    var CreditCardValidator = /** @class */ (function () {
        function CreditCardValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        CreditCardValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return creditCard(c);
            };
        CreditCardValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',
                        providers: [CREDIT_CARD_VALIDATOR]
                    },] }
        ];
        return CreditCardValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DATE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return DateValidator; }),
        multi: true
    };
    var DateValidator = /** @class */ (function () {
        function DateValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        DateValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return date(c);
            };
        DateValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[date][formControlName],[date][formControl],[date][ngModel]',
                        providers: [DATE_VALIDATOR]
                    },] }
        ];
        return DateValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DATE_ISO_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return DateISOValidator; }),
        multi: true
    };
    var DateISOValidator = /** @class */ (function () {
        function DateISOValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        DateISOValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return dateISO(c);
            };
        DateISOValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[dateISO][formControlName],[dateISO][formControl],[dateISO][ngModel]',
                        providers: [DATE_ISO_VALIDATOR]
                    },] }
        ];
        return DateISOValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DIGITS_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return DigitsValidator; }),
        multi: true
    };
    var DigitsValidator = /** @class */ (function () {
        function DigitsValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        DigitsValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return digits(c);
            };
        DigitsValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[digits][formControlName],[digits][formControl],[digits][ngModel]',
                        providers: [DIGITS_VALIDATOR]
                    },] }
        ];
        return DigitsValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EMAIL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return EmailValidator; }),
        multi: true
    };
    var EmailValidator = /** @class */ (function () {
        function EmailValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        EmailValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return email(c);
            };
        EmailValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngvemail][formControlName],[ngvemail][formControl],[ngvemail][ngModel]',
                        providers: [EMAIL_VALIDATOR]
                    },] }
        ];
        return EmailValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EQUAL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return EqualValidator; }),
        multi: true
    };
    var EqualValidator = /** @class */ (function () {
        function EqualValidator() {
        }
        /**
         * @return {?}
         */
        EqualValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = equal(this.equal);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        EqualValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'equal') {
                        this.validator = equal(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        EqualValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        EqualValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        EqualValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[equal][formControlName],[equal][formControl],[equal][ngModel]',
                        providers: [EQUAL_VALIDATOR]
                    },] }
        ];
        EqualValidator.propDecorators = {
            equal: [{ type: core.Input }]
        };
        return EqualValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EQUAL_TO_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return EqualToValidator; }),
        multi: true
    };
    var EqualToValidator = /** @class */ (function () {
        function EqualToValidator() {
        }
        /**
         * @return {?}
         */
        EqualToValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = equalTo(this.equalTo);
            };
        /**
         * @param {?} c
         * @return {?}
         */
        EqualToValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        EqualToValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[equalTo][formControlName],[equalTo][formControl],[equalTo][ngModel]',
                        providers: [EQUAL_TO_VALIDATOR]
                    },] }
        ];
        EqualToValidator.propDecorators = {
            equalTo: [{ type: core.Input }]
        };
        return EqualToValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var GREATER_THAN_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return GreaterThanValidator; }),
        multi: true
    };
    var GreaterThanValidator = /** @class */ (function () {
        function GreaterThanValidator() {
        }
        /**
         * @return {?}
         */
        GreaterThanValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = gt(this.gt);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GreaterThanValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'gt') {
                        this.validator = gt(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        GreaterThanValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        GreaterThanValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        GreaterThanValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[gt][formControlName],[gt][formControl],[gt][ngModel]',
                        providers: [GREATER_THAN_VALIDATOR]
                    },] }
        ];
        GreaterThanValidator.propDecorators = {
            gt: [{ type: core.Input }]
        };
        return GreaterThanValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var GREATER_THAN_EQUAL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return GreaterThanEqualValidator; }),
        multi: true
    };
    var GreaterThanEqualValidator = /** @class */ (function () {
        function GreaterThanEqualValidator() {
        }
        /**
         * @return {?}
         */
        GreaterThanEqualValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = gte(this.gte);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GreaterThanEqualValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'gte') {
                        this.validator = gte(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        GreaterThanEqualValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        GreaterThanEqualValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        GreaterThanEqualValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[gte][formControlName],[gte][formControl],[gte][ngModel]',
                        providers: [GREATER_THAN_EQUAL_VALIDATOR]
                    },] }
        ];
        GreaterThanEqualValidator.propDecorators = {
            gte: [{ type: core.Input }]
        };
        return GreaterThanEqualValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var JSON_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return JSONValidator; }),
        multi: true
    };
    var JSONValidator = /** @class */ (function () {
        function JSONValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        JSONValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return json(c);
            };
        JSONValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[json][formControlName],[json][formControl],[json][ngModel]',
                        providers: [JSON_VALIDATOR]
                    },] }
        ];
        return JSONValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LESS_THAN_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return LessThanValidator; }),
        multi: true
    };
    var LessThanValidator = /** @class */ (function () {
        function LessThanValidator() {
        }
        /**
         * @return {?}
         */
        LessThanValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = lt(this.lt);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        LessThanValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'lt') {
                        this.validator = lt(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        LessThanValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        LessThanValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        LessThanValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lt][formControlName],[lt][formControl],[lt][ngModel]',
                        providers: [LESS_THAN_VALIDATOR]
                    },] }
        ];
        LessThanValidator.propDecorators = {
            lt: [{ type: core.Input }]
        };
        return LessThanValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LESS_THAN_EQUAL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return LessThanEqualValidator; }),
        multi: true
    };
    var LessThanEqualValidator = /** @class */ (function () {
        function LessThanEqualValidator() {
        }
        /**
         * @return {?}
         */
        LessThanEqualValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = lte(this.lte);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        LessThanEqualValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'lte') {
                        this.validator = lte(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        LessThanEqualValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        LessThanEqualValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        LessThanEqualValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',
                        providers: [LESS_THAN_EQUAL_VALIDATOR]
                    },] }
        ];
        LessThanEqualValidator.propDecorators = {
            lte: [{ type: core.Input }]
        };
        return LessThanEqualValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAX_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return MaxValidator; }),
        multi: true
    };
    var MaxValidator = /** @class */ (function () {
        function MaxValidator() {
        }
        /**
         * @return {?}
         */
        MaxValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = max(this.max);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MaxValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'max') {
                        this.validator = max(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MaxValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MaxValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        MaxValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[max][formControlName],[max][formControl],[max][ngModel]',
                        providers: [MAX_VALIDATOR]
                    },] }
        ];
        MaxValidator.propDecorators = {
            max: [{ type: core.Input }]
        };
        return MaxValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAX_DATE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return MaxDateValidator; }),
        multi: true
    };
    var MaxDateValidator = /** @class */ (function () {
        function MaxDateValidator() {
        }
        /**
         * @return {?}
         */
        MaxDateValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = maxDate(this.maxDate);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MaxDateValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'maxDate') {
                        this.validator = maxDate(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MaxDateValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MaxDateValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        MaxDateValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[maxDate][formControlName],[maxDate][formControl],[maxDate][ngModel]',
                        providers: [MAX_DATE_VALIDATOR]
                    },] }
        ];
        MaxDateValidator.propDecorators = {
            maxDate: [{ type: core.Input }]
        };
        return MaxDateValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MIN_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return MinValidator; }),
        multi: true
    };
    var MinValidator = /** @class */ (function () {
        function MinValidator() {
        }
        /**
         * @return {?}
         */
        MinValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = min(this.min);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MinValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'min') {
                        this.validator = min(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MinValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MinValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        MinValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[min][formControlName],[min][formControl],[min][ngModel]',
                        providers: [MIN_VALIDATOR]
                    },] }
        ];
        MinValidator.propDecorators = {
            min: [{ type: core.Input }]
        };
        return MinValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MIN_DATE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return MinDateValidator; }),
        multi: true
    };
    var MinDateValidator = /** @class */ (function () {
        function MinDateValidator() {
        }
        /**
         * @return {?}
         */
        MinDateValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = minDate(this.minDate);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MinDateValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'minDate') {
                        this.validator = minDate(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MinDateValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MinDateValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        MinDateValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[minDate][formControlName],[minDate][formControl],[minDate][ngModel]',
                        providers: [MIN_DATE_VALIDATOR]
                    },] }
        ];
        MinDateValidator.propDecorators = {
            minDate: [{ type: core.Input }]
        };
        return MinDateValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NOT_EQUAL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return NotEqualValidator; }),
        multi: true
    };
    var NotEqualValidator = /** @class */ (function () {
        function NotEqualValidator() {
        }
        /**
         * @return {?}
         */
        NotEqualValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = notEqual(this.notEqual);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NotEqualValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'notEqual') {
                        this.validator = notEqual(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        NotEqualValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NotEqualValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        NotEqualValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[notEqual][formControlName],[notEqual][formControl],[notEqual][ngModel]',
                        providers: [NOT_EQUAL_VALIDATOR]
                    },] }
        ];
        NotEqualValidator.propDecorators = {
            notEqual: [{ type: core.Input }]
        };
        return NotEqualValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NOT_EQUAL_TO_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return NotEqualToValidator; }),
        multi: true
    };
    var NotEqualToValidator = /** @class */ (function () {
        function NotEqualToValidator() {
        }
        /**
         * @return {?}
         */
        NotEqualToValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = notEqualTo(this.notEqualTo);
            };
        /**
         * @param {?} c
         * @return {?}
         */
        NotEqualToValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        NotEqualToValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[notEqualTo][formControlName],[notEqualTo][formControl],[notEqualTo][ngModel]',
                        providers: [NOT_EQUAL_TO_VALIDATOR]
                    },] }
        ];
        NotEqualToValidator.propDecorators = {
            notEqualTo: [{ type: core.Input }]
        };
        return NotEqualToValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NUMBER_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return NumberValidator; }),
        multi: true
    };
    var NumberValidator = /** @class */ (function () {
        function NumberValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        NumberValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return number(c);
            };
        NumberValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[number][formControlName],[number][formControl],[number][ngModel]',
                        providers: [NUMBER_VALIDATOR]
                    },] }
        ];
        return NumberValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PROPERTY_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return PropertyValidator; }),
        multi: true
    };
    var PropertyValidator = /** @class */ (function () {
        function PropertyValidator() {
        }
        /**
         * @return {?}
         */
        PropertyValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = property(this.property);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        PropertyValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'property') {
                        this.validator = property(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        PropertyValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        PropertyValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        PropertyValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[property][formControlName],[property][formControl],[property][ngModel]',
                        providers: [PROPERTY_VALIDATOR]
                    },] }
        ];
        PropertyValidator.propDecorators = {
            property: [{ type: core.Input }]
        };
        return PropertyValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var RANGE_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return RangeValidator; }),
        multi: true
    };
    var RangeValidator = /** @class */ (function () {
        function RangeValidator() {
        }
        /**
         * @return {?}
         */
        RangeValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = range(this.range);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        RangeValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'range') {
                        this.validator = range(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        RangeValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RangeValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        RangeValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[range][formControlName],[range][formControl],[range][ngModel]',
                        providers: [RANGE_VALIDATOR]
                    },] }
        ];
        RangeValidator.propDecorators = {
            range: [{ type: core.Input }]
        };
        return RangeValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var RANGE_LENGTH_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return RangeLengthValidator; }),
        multi: true
    };
    var RangeLengthValidator = /** @class */ (function () {
        function RangeLengthValidator() {
        }
        /**
         * @return {?}
         */
        RangeLengthValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = rangeLength(this.rangeLength);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        RangeLengthValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'rangeLength') {
                        this.validator = rangeLength(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        RangeLengthValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RangeLengthValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        RangeLengthValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[rangeLength][formControlName],[rangeLength][formControl],[rangeLength][ngModel]',
                        providers: [RANGE_LENGTH_VALIDATOR]
                    },] }
        ];
        RangeLengthValidator.propDecorators = {
            rangeLength: [{ type: core.Input }]
        };
        return RangeLengthValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var URL_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return UrlValidator; }),
        multi: true
    };
    var UrlValidator = /** @class */ (function () {
        function UrlValidator() {
        }
        /**
         * @param {?} c
         * @return {?}
         */
        UrlValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return url(c);
            };
        UrlValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[url][formControlName],[url][formControl],[url][ngModel]',
                        providers: [URL_VALIDATOR]
                    },] }
        ];
        return UrlValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UUID_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef(function () { return UUIDValidator; }),
        multi: true
    };
    var UUIDValidator = /** @class */ (function () {
        function UUIDValidator() {
        }
        /**
         * @return {?}
         */
        UUIDValidator.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.validator = uuid(this.uuid);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        UUIDValidator.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var key in changes) {
                    if (key === 'uuid') {
                        this.validator = uuid(changes[key].currentValue);
                        if (this.onChange) {
                            this.onChange();
                        }
                    }
                }
            };
        /**
         * @param {?} c
         * @return {?}
         */
        UUIDValidator.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return this.validator(c);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        UUIDValidator.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        UUIDValidator.decorators = [
            { type: core.Directive, args: [{
                        selector: '[uuid][formControlName],[uuid][formControl],[uuid][ngModel]',
                        providers: [UUID_VALIDATOR]
                    },] }
        ];
        UUIDValidator.propDecorators = {
            uuid: [{ type: core.Input }]
        };
        return UUIDValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CustomValidators = {
        arrayLength: arrayLength,
        base64: base64,
        creditCard: creditCard,
        date: date,
        dateISO: dateISO,
        digits: digits,
        email: email,
        equal: equal,
        equalTo: equalTo,
        gt: gt,
        gte: gte,
        json: json,
        lt: lt,
        lte: lte,
        max: max,
        maxDate: maxDate,
        min: min,
        minDate: minDate,
        notEqual: notEqual,
        notEqualTo: notEqualTo,
        number: number,
        property: property,
        range: range,
        rangeLength: rangeLength,
        url: url,
        uuid: uuid
    };
    /** @type {?} */
    var CustomDirectives = [
        ArrayLengthValidator,
        Base64Validator,
        CreditCardValidator,
        DateValidator,
        DateISOValidator,
        DigitsValidator,
        EmailValidator,
        EqualValidator,
        EqualToValidator,
        GreaterThanValidator,
        GreaterThanEqualValidator,
        JSONValidator,
        LessThanValidator,
        LessThanEqualValidator,
        MaxValidator,
        MaxDateValidator,
        MinValidator,
        MinDateValidator,
        NotEqualValidator,
        NotEqualToValidator,
        NumberValidator,
        PropertyValidator,
        RangeValidator,
        RangeLengthValidator,
        UrlValidator,
        UUIDValidator
    ];
    var CustomFormsModule = /** @class */ (function () {
        function CustomFormsModule() {
        }
        CustomFormsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CustomDirectives],
                        exports: [CustomDirectives]
                    },] }
        ];
        return CustomFormsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.CustomValidators = CustomValidators;
    exports.CustomFormsModule = CustomFormsModule;
    exports.ɵba = ArrayLengthValidator;
    exports.ɵa = arrayLength;
    exports.ɵbb = Base64Validator;
    exports.ɵb = base64;
    exports.ɵbc = CreditCardValidator;
    exports.ɵc = creditCard;
    exports.ɵbe = DateISOValidator;
    exports.ɵe = dateISO;
    exports.ɵbd = DateValidator;
    exports.ɵd = date;
    exports.ɵbf = DigitsValidator;
    exports.ɵf = digits;
    exports.ɵbg = EmailValidator;
    exports.ɵg = email;
    exports.ɵbi = EqualToValidator;
    exports.ɵi = equalTo;
    exports.ɵbh = EqualValidator;
    exports.ɵh = equal;
    exports.ɵbk = GreaterThanEqualValidator;
    exports.ɵk = gte;
    exports.ɵbj = GreaterThanValidator;
    exports.ɵj = gt;
    exports.ɵbl = JSONValidator;
    exports.ɵl = json;
    exports.ɵbn = LessThanEqualValidator;
    exports.ɵn = lte;
    exports.ɵbm = LessThanValidator;
    exports.ɵm = lt;
    exports.ɵbp = MaxDateValidator;
    exports.ɵp = maxDate;
    exports.ɵbo = MaxValidator;
    exports.ɵo = max;
    exports.ɵbr = MinDateValidator;
    exports.ɵr = minDate;
    exports.ɵbq = MinValidator;
    exports.ɵq = min;
    exports.ɵbt = NotEqualToValidator;
    exports.ɵt = notEqualTo;
    exports.ɵbs = NotEqualValidator;
    exports.ɵs = notEqual;
    exports.ɵbu = NumberValidator;
    exports.ɵu = number;
    exports.ɵbv = PropertyValidator;
    exports.ɵv = property;
    exports.ɵbx = RangeLengthValidator;
    exports.ɵx = rangeLength;
    exports.ɵbw = RangeValidator;
    exports.ɵw = range;
    exports.ɵby = UrlValidator;
    exports.ɵy = url;
    exports.ɵbz = UUIDValidator;
    exports.ɵz = uuid;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,