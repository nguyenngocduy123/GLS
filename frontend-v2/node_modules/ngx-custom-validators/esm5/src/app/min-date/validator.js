/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { FormControl, NgModel, Validators } from '@angular/forms';
import { isDate, isPresent, parseDate } from '../util/lang';
/** @type {?} */
export var minDate = function (minInput) {
    /** @type {?} */
    var value;
    /** @type {?} */
    var subscribe = false;
    /** @type {?} */
    var minValue = minInput;
    /** @type {?} */
    var isForm = minInput instanceof FormControl || minInput instanceof NgModel;
    return function (control) {
        if (!subscribe && isForm) {
            subscribe = true;
            minInput.valueChanges.subscribe(function () {
                control.updateValueAndValidity();
            });
        }
        if (isForm) {
            minValue = minInput.value;
        }
        value = parseDate(minValue);
        if (!isDate(value) && !(value instanceof Function)) {
            if (value == null) {
                return null;
            }
            else if (isForm) {
                return { minDate: { error: 'minDate is invalid' } };
            }
            else {
                throw Error('minDate value must be or return a formatted date');
            }
        }
        if (isPresent(Validators.required(control))) {
            return null;
        }
        /** @type {?} */
        var d = new Date(parseDate(control.value)).getTime();
        if (!isDate(d)) {
            return { value: true };
        }
        if (value instanceof Function) {
            value = value();
        }
        return d >= new Date(value).getTime() ? null : (isForm ? { minDate: { control: minInput, value: minInput.value } } : { minDate: { value: minValue, control: undefined } });
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWN1c3RvbS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9taW4tZGF0ZS92YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBbUIsV0FBVyxFQUFFLE9BQU8sRUFBaUMsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEgsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUU1RCxXQUFhLE9BQU8sR0FBRyxVQUFDLFFBQWE7O0lBQ25DLElBQUksS0FBSyxDQUFDOztJQUNWLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQzs7SUFDdEIsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDOztJQUN4QixJQUFNLE1BQU0sR0FBRyxRQUFRLFlBQVksV0FBVyxJQUFJLFFBQVEsWUFBWSxPQUFPLENBQUM7SUFDOUUsT0FBTyxVQUFDLE9BQXdCO1FBRTlCLElBQUksQ0FBQyxTQUFTLElBQUksTUFBTSxFQUFFO1lBQ3hCLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDakIsUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7Z0JBQzlCLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2FBQ2xDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxNQUFNLEVBQUU7WUFDVixRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUVELEtBQUssR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLFFBQVEsQ0FBQyxFQUFFO1lBQ2xELElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDakIsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTSxJQUFJLE1BQU0sRUFBRTtnQkFDakIsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxFQUFFLENBQUM7YUFDckQ7aUJBQU07Z0JBQ0wsTUFBTSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQzthQUNqRTtTQUNGO1FBRUQsSUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7O1FBRUQsSUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXZELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxLQUFLLFlBQVksUUFBUSxFQUFFO1lBQzdCLEtBQUssR0FBRyxLQUFLLEVBQUUsQ0FBQztTQUNqQjtRQUVELE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM1SyxDQUFDO0NBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUNvbnRyb2wsIE5nTW9kZWwsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgaXNEYXRlLCBpc1ByZXNlbnQsIHBhcnNlRGF0ZSB9IGZyb20gJy4uL3V0aWwvbGFuZyc7XG5cbmV4cG9ydCBjb25zdCBtaW5EYXRlID0gKG1pbklucHV0OiBhbnkpOiBWYWxpZGF0b3JGbiA9PiB7XG4gIGxldCB2YWx1ZTtcbiAgbGV0IHN1YnNjcmliZSA9IGZhbHNlO1xuICBsZXQgbWluVmFsdWUgPSBtaW5JbnB1dDtcbiAgY29uc3QgaXNGb3JtID0gbWluSW5wdXQgaW5zdGFuY2VvZiBGb3JtQ29udHJvbCB8fCBtaW5JbnB1dCBpbnN0YW5jZW9mIE5nTW9kZWw7XG4gIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyA9PiB7XG5cbiAgICBpZiAoIXN1YnNjcmliZSAmJiBpc0Zvcm0pIHtcbiAgICAgIHN1YnNjcmliZSA9IHRydWU7XG4gICAgICBtaW5JbnB1dC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNGb3JtKSB7XG4gICAgICBtaW5WYWx1ZSA9IG1pbklucHV0LnZhbHVlO1xuICAgIH1cblxuICAgIHZhbHVlID0gcGFyc2VEYXRlKG1pblZhbHVlKTtcblxuICAgIGlmICghaXNEYXRlKHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoaXNGb3JtKSB7XG4gICAgICAgIHJldHVybiB7IG1pbkRhdGU6IHsgZXJyb3I6ICdtaW5EYXRlIGlzIGludmFsaWQnIH0gfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdtaW5EYXRlIHZhbHVlIG11c3QgYmUgb3IgcmV0dXJuIGEgZm9ybWF0dGVkIGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNQcmVzZW50KFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCkpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBkID0gbmV3IERhdGUocGFyc2VEYXRlKGNvbnRyb2wudmFsdWUpKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAoIWlzRGF0ZShkKSkge1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IHRydWUgfTtcbiAgICB9XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgIHZhbHVlID0gdmFsdWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZCA+PSBuZXcgRGF0ZSh2YWx1ZSkuZ2V0VGltZSgpID8gbnVsbCA6IChpc0Zvcm0gPyB7IG1pbkRhdGU6IHsgY29udHJvbDogbWluSW5wdXQsIHZhbHVlOiBtaW5JbnB1dC52YWx1ZSB9IH0gOiB7IG1pbkRhdGU6IHsgdmFsdWU6IG1pblZhbHVlLCBjb250cm9sOiB1bmRlZmluZWQgfSB9KTtcbiAgfTtcbn07XG4iXX0=