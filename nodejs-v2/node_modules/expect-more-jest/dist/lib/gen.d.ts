export declare type AnyFunction = (...args: any[]) => any;
export declare type Collection = object | any[];
export declare type GeneratorCreator = (collection: Collection) => IGenerator;
export declare type PropName = string | number;
export declare type DeepReducer<T> = (memo: T, path: PropName[], value?: any) => T;
export interface ILocator {
    key: any;
    owner: any;
}
export interface IArrayLocator extends ILocator {
    key: number;
    owner: any[];
}
export interface IObjectLocator extends ILocator {
    key: string;
    owner: object;
}
export declare type ArrayMutator = (locator: IArrayLocator) => void;
export declare type ObjectMutator = (locator: IObjectLocator) => void;
export declare type Generator = (collection: Collection) => any[];
export interface IGeneratorResult {
    error: Error | null;
    pass: boolean;
    permutation: Collection | null;
}
export interface IGenerator {
    assert: (fn: AnyFunction) => IGeneratorResult;
    name: string;
    permutations: Collection[];
    shape: Collection;
}
export declare const missingBranches: (collection: import("expect-more/dist/typings").Collection) => IGenerator;
export declare const missingLeaves: (collection: import("expect-more/dist/typings").Collection) => IGenerator;
export declare const missingNodes: (collection: import("expect-more/dist/typings").Collection) => IGenerator;
export declare const nullBranches: (collection: import("expect-more/dist/typings").Collection) => IGenerator;
export declare const nullLeaves: (collection: import("expect-more/dist/typings").Collection) => IGenerator;
export declare const nullNodes: (collection: import("expect-more/dist/typings").Collection) => IGenerator;
