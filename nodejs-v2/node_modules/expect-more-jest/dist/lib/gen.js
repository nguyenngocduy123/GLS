"use strict";
exports.__esModule = true;
var expect_more_1 = require("expect-more");
var deep_reduce_1 = require("./deep-reduce");
var get_in_1 = require("./get-in");
var not = function (fn) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return !fn.apply(void 0, args);
}; };
var createMutator = function (isEligible, mutate) { return function (locator) { return [locator].filter(isEligible).map(mutate); }; };
var unwrap = function (locator) { return locator.owner[locator.key]; };
var isBranch = function (locator) { return expect_more_1.isObject(unwrap(locator)) || expect_more_1.isArray(unwrap(locator)); };
var locateDescendant = function (path, clone) {
    var key = path[path.length - 1];
    var pathToParent = path.length > 1 ? path.slice(0, path.length - 1) : [];
    var owner = pathToParent.length ? get_in_1.getIn(pathToParent, clone) : clone;
    return { key: key, owner: owner };
};
var createGenerator = function (mutateObject, mutateArray, getInitialValue) { return function (collection) {
    var original = JSON.stringify(collection);
    var mutateDescendant = function (memo, path) {
        if (path.length) {
            var clone = JSON.parse(original);
            var locator = locateDescendant(path, clone);
            if (expect_more_1.isObject(locator.owner)) {
                mutateObject(locator);
            }
            else if (expect_more_1.isArray(locator.owner)) {
                mutateArray(locator);
            }
            if (JSON.stringify(clone) !== original) {
                memo.push(clone);
            }
        }
        return memo;
    };
    return deep_reduce_1.deepReduce(collection, mutateDescendant, getInitialValue());
}; };
var removeFromObject = function (locator) {
    delete locator.owner[locator.key];
};
var removeFromArray = function (locator) {
    locator.owner.splice(locator.key, 1);
};
var nullifyFromObject = function (locator) {
    locator.owner[locator.key] = null;
};
var nullifyFromArray = function (locator) {
    locator.owner.splice(locator.key, 1, null);
};
var deleteBranch = createMutator(isBranch, removeFromObject);
var deleteLeaf = createMutator(not(isBranch), removeFromObject);
var nullifyBranchInArray = createMutator(isBranch, nullifyFromArray);
var nullifyBranchInObject = createMutator(isBranch, nullifyFromObject);
var nullifyLeafInArray = createMutator(not(isBranch), nullifyFromArray);
var nullifyLeafInObject = createMutator(not(isBranch), nullifyFromObject);
var removeBranch = createMutator(isBranch, removeFromArray);
var removeLeaf = createMutator(not(isBranch), removeFromArray);
var createWrapper = function (generator, name) { return function (collection) {
    var permutations = generator(collection);
    return {
        assert: function (fn) {
            for (var i = 0, len = permutations.length; i < len; i++) {
                try {
                    fn(permutations[i]);
                }
                catch (err) {
                    return {
                        error: err,
                        pass: false,
                        permutation: permutations[i]
                    };
                }
            }
            return {
                error: null,
                pass: true,
                permutation: null
            };
        },
        name: name,
        permutations: permutations,
        shape: collection
    };
}; };
exports.missingBranches = createWrapper(createGenerator(deleteBranch, removeBranch, function () { return [undefined]; }), 'Generator<MissingBranches>');
exports.missingLeaves = createWrapper(createGenerator(deleteLeaf, removeLeaf, function () { return [undefined]; }), 'Generator<MissingLeaves>');
exports.missingNodes = createWrapper(createGenerator(removeFromObject, removeFromArray, function () { return [undefined]; }), 'Generator<MissingNodes>');
exports.nullBranches = createWrapper(createGenerator(nullifyBranchInObject, nullifyBranchInArray, function () { return [null]; }), 'Generator<NullBranches>');
exports.nullLeaves = createWrapper(createGenerator(nullifyLeafInObject, nullifyLeafInArray, function () { return [null]; }), 'Generator<NullLeaves>');
exports.nullNodes = createWrapper(createGenerator(nullifyFromObject, nullifyFromArray, function () { return [null]; }), 'Generator<NullNodes>');
