"use strict";
exports.__esModule = true;
var curryFn = function (f, xs, ctx) {
    return f.length <= xs.length ? f.apply(ctx, xs.slice(0, f.length)) : function () {
        var ys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            ys[_i] = arguments[_i];
        }
        return curryFn(f, xs.concat(ys), ctx);
    };
};
var curry = (function (f, ctx) {
    return f.length === 0 ? function () { return f.call(ctx); } : curryFn(f, [], ctx);
});
var every = curry(function (fn, array) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (fn(array[i]) === false) {
            return false;
        }
    }
    return array.length > 0;
});
var keys = function (object) {
    var returnValue = [];
    for (var key in object) {
        if ({}.hasOwnProperty.call(object, key)) {
            returnValue.push(key);
        }
    }
    return returnValue;
};
var getType = function (value) { return Object.prototype.toString.call(value); };
var hasType = function (type) { return function (value) { return getType(value) === "[object " + type + "]"; }; };
var isIndexedList = function (value) { return exports.isString(value) || exports.isArray(value); };
exports.isArray = hasType('Array');
exports.isBoolean = hasType('Boolean');
exports.isDate = hasType('Date');
exports.isFunction = hasType('Function');
exports.isNull = hasType('Null');
exports.isObject = hasType('Object');
exports.isRegExp = hasType('RegExp');
exports.isString = hasType('String');
exports.isUndefined = hasType('Undefined');
exports.isWalkable = function (value) { return !exports.isNull(value) && !exports.isUndefined(value); };
var isGivenBoolean = function (bool) { return function (value) {
    return value === bool || (exports.isBoolean(value) && value.valueOf() === bool);
}; };
exports.isAfter = curry(function (otherDate, value) { return exports.isDate(value) && exports.isDate(otherDate) && value.getTime() > otherDate.getTime(); });
exports.isFalse = isGivenBoolean(false);
exports.isTrue = isGivenBoolean(true);
exports.isBefore = curry(function (otherDate, value) { return exports.isAfter(value, otherDate); });
exports.isNumber = function (value) { return hasType('Number')(value) && !isNaN(parseFloat(value)); };
exports.isDivisibleBy = curry(function (other, value) { return value % other === 0; });
exports.isEvenNumber = function (value) { return exports.isNumber(value) && exports.isDivisibleBy(2, value); };
exports.isOddNumber = function (value) { return exports.isNumber(value) && !exports.isDivisibleBy(2, value); };
exports.isWholeNumber = function (value) { return exports.isNumber(value) && (value === 0 || exports.isDivisibleBy(1, value)); };
exports.isDecimalNumber = function (value) { return exports.isNumber(value) && String(value).indexOf('.') !== -1; };
exports.isCalculable = function (value) { return !isNaN(value * 2); };
exports.isGreaterThanOrEqualTo = curry(function (other, value) { return exports.isNumber(value) && exports.isNumber(other) && value >= other; });
exports.isLessThanOrEqualTo = curry(function (other, value) { return exports.isNumber(value) && exports.isNumber(other) && value <= other; });
exports.isWithinRange = curry(function (floor, ceiling, value) { return exports.isLessThanOrEqualTo(ceiling, value) && exports.isGreaterThanOrEqualTo(floor, value); });
exports.isNear = curry(function (other, epsilon, value) {
    return exports.isWithinRange(other - epsilon, other + epsilon, value);
});
exports.isArrayOfBooleans = function (value) { return exports.isArray(value) && every(exports.isBoolean, value); };
exports.isArrayOfNumbers = function (value) { return exports.isArray(value) && every(exports.isNumber, value); };
exports.isArrayOfObjects = function (value) { return exports.isArray(value) && every(exports.isObject, value); };
exports.isArrayOfStrings = function (value) { return exports.isArray(value) && every(exports.isString, value); };
exports.isArrayOfSize = curry(function (size, value) { return exports.isArray(value) && value.length === size; });
exports.isEmptyArray = exports.isArrayOfSize(0);
exports.isEmptyObject = function (value) { return exports.isObject(value) && keys(value).length === 0; };
exports.isEmptyString = function (value) { return exports.isString(value) && value.length === 0; };
exports.isValidDate = function (value) { return exports.isDate(value) && !isNaN(value.getTime()); };
exports.isWhitespace = function (value) { return exports.isString(value) && value.search(/\S/) === -1; };
exports.startsWith = curry(function (otherString, value) {
    return exports.isNonEmptyString(value) && exports.isNonEmptyString(otherString) && value.slice(0, otherString.length) === otherString;
});
exports.endsWith = curry(function (otherString, value) {
    return exports.isNonEmptyString(value) &&
        exports.isNonEmptyString(otherString) &&
        value.slice(value.length - otherString.length, value.length) === otherString;
});
exports.isNonEmptyArray = function (value) { return exports.isArray(value) && value.length > 0; };
exports.isNonEmptyObject = function (value) { return exports.isObject(value) && keys(value).length > 0; };
exports.isNonEmptyString = function (value) { return exports.isString(value) && value.length > 0; };
exports.isSameLengthAs = curry(function (otherString, value) {
    return isIndexedList(value) && isIndexedList(otherString) && value.length === otherString.length;
});
exports.isShorterThan = curry(function (otherString, value) {
    return isIndexedList(value) && isIndexedList(otherString) && value.length < otherString.length;
});
exports.isLongerThan = curry(function (otherString, value) {
    return isIndexedList(value) && isIndexedList(otherString) && value.length > otherString.length;
});
exports.hasMember = curry(function (key, value) { return exports.isString(key) && exports.isWalkable(value) && key in value; });
exports.isIso8601 = function (value) {
    // '1999-12-31'
    // '1999-12-31T23:59'
    // '1999-12-31T23:59:59'
    // '1999-12-31T23:59:59.000'
    // '1999-12-31T23:59:59.000Z'
    return (exports.isString(value) &&
        (/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.test(value) ||
            /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})$/.test(value) ||
            /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})$/.test(value) ||
            /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})\.([0-9]{3})$/.test(value) ||
            /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})\.([0-9]{3})Z$/.test(value)) &&
        exports.isValidDate(new Date(value)));
};
exports.isJsonString = function (value) {
    try {
        return JSON.parse(value) !== null;
    }
    catch (err) {
        return false;
    }
};
exports.throwsAnyError = function (value) {
    try {
        value();
        return false;
    }
    catch (err) {
        return true;
    }
};
exports.throwsErrorOfType = curry(function (type, value) {
    try {
        value();
        return false;
    }
    catch (err) {
        return err.name === type;
    }
});
